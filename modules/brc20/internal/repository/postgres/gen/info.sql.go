// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: info.sql

package gen

import (
	"context"
)

const createIndexerState = `-- name: CreateIndexerState :exec
INSERT INTO brc20_indexer_states (client_version, network, db_version, event_hash_version) VALUES ($1, $2, $3, $4)
`

type CreateIndexerStateParams struct {
	ClientVersion    string
	Network          string
	DbVersion        int32
	EventHashVersion int32
}

func (q *Queries) CreateIndexerState(ctx context.Context, arg CreateIndexerStateParams) error {
	_, err := q.db.Exec(ctx, createIndexerState,
		arg.ClientVersion,
		arg.Network,
		arg.DbVersion,
		arg.EventHashVersion,
	)
	return err
}

const getLatestIndexerState = `-- name: GetLatestIndexerState :one
SELECT id, client_version, network, db_version, event_hash_version, created_at FROM brc20_indexer_states ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetLatestIndexerState(ctx context.Context) (Brc20IndexerState, error) {
	row := q.db.QueryRow(ctx, getLatestIndexerState)
	var i Brc20IndexerState
	err := row.Scan(
		&i.Id,
		&i.ClientVersion,
		&i.Network,
		&i.DbVersion,
		&i.EventHashVersion,
		&i.CreatedAt,
	)
	return i, err
}
