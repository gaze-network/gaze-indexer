// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: info.sql

package gen

import (
	"context"
)

const getLatestIndexerState = `-- name: GetLatestIndexerState :one
SELECT id, db_version, event_hash_version, created_at FROM runes_indexer_state ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetLatestIndexerState(ctx context.Context) (RunesIndexerState, error) {
	row := q.db.QueryRow(ctx, getLatestIndexerState)
	var i RunesIndexerState
	err := row.Scan(
		&i.Id,
		&i.DbVersion,
		&i.EventHashVersion,
		&i.CreatedAt,
	)
	return i, err
}

const getLatestIndexerStats = `-- name: GetLatestIndexerStats :one
SELECT "client_version", "network" FROM runes_indexer_stats ORDER BY id DESC LIMIT 1
`

type GetLatestIndexerStatsRow struct {
	ClientVersion string
	Network       string
}

func (q *Queries) GetLatestIndexerStats(ctx context.Context) (GetLatestIndexerStatsRow, error) {
	row := q.db.QueryRow(ctx, getLatestIndexerStats)
	var i GetLatestIndexerStatsRow
	err := row.Scan(&i.ClientVersion, &i.Network)
	return i, err
}

const setIndexerState = `-- name: SetIndexerState :exec
INSERT INTO runes_indexer_state (db_version, event_hash_version) VALUES ($1, $2)
`

type SetIndexerStateParams struct {
	DbVersion        int32
	EventHashVersion int32
}

func (q *Queries) SetIndexerState(ctx context.Context, arg SetIndexerStateParams) error {
	_, err := q.db.Exec(ctx, setIndexerState, arg.DbVersion, arg.EventHashVersion)
	return err
}

const updateIndexerStats = `-- name: UpdateIndexerStats :exec
INSERT INTO runes_indexer_stats (client_version, network) VALUES ($1, $2)
`

type UpdateIndexerStatsParams struct {
	ClientVersion string
	Network       string
}

func (q *Queries) UpdateIndexerStats(ctx context.Context, arg UpdateIndexerStatsParams) error {
	_, err := q.db.Exec(ctx, updateIndexerStats, arg.ClientVersion, arg.Network)
	return err
}
